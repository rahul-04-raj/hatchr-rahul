import React, { useState, useRef, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import API from '../lib/api'
import resolveMediaUrl from '../lib/media'
import { useImage } from '../hooks/useImage'
import { useAuth } from '../store/useAuth'
        {showComments && (
          <div className="mt-4">
            <div className="max-h-60 overflow-y-auto">
              {post.comments && post.comments.map((c, idx) => (
                <div key={idx} className="py-2 text-sm text-gray-700">
                  <span onClick={() => navigate(`/profile/${c.user?.username}`)} className="font-semibold cursor-pointer hover:underline">
                    {c.user?.username}
                  </span>{' '}
                  {c.text}
                </div>
              ))}
            </div>

            <form 
              onSubmit={async e => { 
                e.preventDefault(); 
                if(!comment.trim()) return; 
                try { 
                  await API.post(`/posts/${post._id}/comment`, { text: comment }); 
                  setComment(''); 
                  onRefresh && onRefresh() 
                } catch(e) { 
                  console.error(e) 
                } 
              }} 
              className="mt-4 flex gap-2"
            >
              <input 
                value={comment} 
                onChange={e => setComment(e.target.value)} 
                className="flex-1 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                placeholder="Add a comment..." 
              />
              <button 
                type="submit"
                disabled={!comment.trim()}
                className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Post
              </button>
            </form>
          </div>
        )}/hooks/useImage'
import { useAuth } from '../store/useAuth'

export default function PostCard({ post, onRefresh }){
  const navigate = useNavigate()
  const currentUser = useAuth(state => state.user)
  const [comment, setComment] = useState('')
  const [showComments, setShowComments] = useState(false)
  const [showMenu, setShowMenu] = useState(false)
  const [loadingVote, setLoadingVote] = useState(false)
  const [loadingDelete, setLoadingDelete] = useState(false)
  const menuRef = useRef(null)
  const [voteStats, setVoteStats] = useState(False)
import { useNavigate } from 'react-router-dom'
import API from '../lib/api'
import resolveMediaUrl from '../lib/media'
import { useImage } from '../hooks/useImage'
import { useAuth } from '../store/useAuth'

export default function PostCard({ post, onRefresh }) {
  const navigate = useNavigate()
  const currentUser = useAuth(state => state.user)
  const [comment, setComment] = useState('')
  const [loadingVote, setLoadingVote] = useState(false)
  const [loadingDelete, setLoadingDelete] = useState(false)
  const [voteStats, setVoteStats] = useState({
    upvotes: post.upvotes?.length || 0,
    downvotes: post.downvotes?.length || 0,
    hasUpvoted: currentUser ? post.upvotes?.some(id => id.toString() === currentUser._id) : false,
    hasDownvoted: currentUser ? post.downvotes?.some(id => id.toString() === currentUser._id) : false
  })
  const { loaded: mediaLoaded, error: mediaError, imgSrc } = useImage(resolveMediaUrl(post.mediaUrl))
  const { loaded: avatarLoaded, imgSrc: avatarSrc } = useImage(post.user?.avatar || '/placeholder-avatar.png')

  // Handle click outside for menu
  useEffect(() => {
    function handleClickOutside(event) {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setShowMenu(false)
      }
    }
    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [menuRef])

  const goToProfile = (e) => {
    e.preventDefault()
    if (post.user?.username) {
      navigate(`/profile/${post.user.username}`)
    }
  }

  const handleVote = async (type) => {
    if (!currentUser) {
      alert('Please login to vote')
      return
    }
    if (loadingVote) return
    setLoadingVote(true)
    try {
      const res = await API.post(`/posts/${post._id}/${type}`)
      if (res.data.success) {
        setVoteStats(prev => ({
          upvotes: res.data.upvotes,
          downvotes: res.data.downvotes,
          hasUpvoted: type === 'upvote' ? !prev.hasUpvoted : false,
          hasDownvoted: type === 'downvote' ? !prev.hasDownvoted : false
        }))
      }
    } catch (err) {
      console.error(err)
      if (err.response?.status === 404) {
        alert('This post no longer exists')
      } else {
        alert('Failed to vote. Please try again.')
      }
    } finally {
      setLoadingVote(false)
    }
  }

  const handleDelete = async () => {
    if (!window.confirm('Are you sure you want to delete this post?')) return

    setLoadingDelete(true)
    try {
      await API.delete(`/posts/${post._id}`)
      onRefresh && onRefresh()
    } catch (err) {
      console.error(err)
      alert('Failed to delete post')
    } finally {
      setLoadingDelete(false)
    }
  }

  return (
    <div className="bg-white rounded shadow mb-6">
      <div className="p-3 flex items-center">
        <img
          onClick={goToProfile}
          src={avatarSrc}
          className={`w-10 h-10 rounded-full mr-3 cursor-pointer ${!avatarLoaded ? 'animate-pulse bg-gray-200' : ''}`}
          alt={post.user?.username || 'avatar'}
        />
        <div className="flex-1">
          <div onClick={goToProfile} className="font-semibold cursor-pointer hover:underline">{post.user?.username}</div>
          <div className="text-sm text-gray-600">{post.createdAt ? new Date(post.createdAt).toLocaleString() : ''}</div>
        </div>
        <div className="text-gray-500">‚Ä¢‚Ä¢‚Ä¢</div>
      </div>

      <div className="w-full bg-black relative aspect-[4/3] flex items-center justify-center">
        {!mediaLoaded && !mediaError && (
          <div className="absolute inset-0 bg-gray-100 animate-pulse" />
        )}
        {mediaError && (
          <div className="absolute inset-0 bg-gray-100 flex items-center justify-center text-gray-400">
            Unable to load image
          </div>
        )}
        <img
          src={imgSrc}
          alt={post.caption || 'post'}
          className={`w-full h-full object-contain ${!mediaLoaded ? 'opacity-0' : ''}`}
          onLoad={() => console.log('Image loaded:', imgSrc)}
          onError={() => console.log('Image error:', imgSrc)}
        />
      </div>

      <div className="p-3">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-3">
            {/* Vote buttons */}
            <div className="flex items-center gap-1">
              <button
                onClick={() => handleVote('upvote')}
                disabled={loadingVote}
                className={`px-3 py-1 rounded-md flex items-center gap-1 ${voteStats.hasUpvoted ? 'bg-green-500 text-white' : 'hover:bg-gray-100'
                  }`}
              >
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M12 20V4m0 0l-7 7m7-7l7 7" />
                </svg>
                <span>{voteStats.upvotes}</span>
              </button>

              <button
                onClick={() => handleVote('downvote')}
                disabled={loadingVote}
                className={`px-3 py-1 rounded-md flex items-center gap-1 ${voteStats.hasDownvoted ? 'bg-red-500 text-white' : 'hover:bg-gray-100'
                  }`}
              >
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M12 4v16m0 0l7-7m-7 7l-7-7" />
                </svg>
                <span>{voteStats.downvotes}</span>
              </button>
            </div>

            <button className="p-2 hover:bg-gray-100 rounded-md">
              <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
            </button>
            <button className="p-2 hover:bg-gray-100 rounded-md">
              <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
              </svg>
            </button>

            {/* Delete button - only show for post owner */}
            {currentUser && post.user && currentUser._id === post.user._id && (
              <button
                onClick={handleDelete}
                disabled={loadingDelete}
                className="text-red-500 hover:text-red-600 text-sm font-medium"
              >
                {loadingDelete ? 'Deleting...' : 'üóëÔ∏è Delete'}
              </button>
            )}
          </div>
          <div className="text-sm text-gray-600">{post.likes?.length || 0} likes</div>
        </div>        <div className="mb-2"><span onClick={goToProfile} className="font-semibold cursor-pointer hover:underline">{post.user?.username}</span> {post.caption}</div>

        <div>
          {post.comments && post.comments.map((c, idx) => (
            <div key={idx} className="text-sm text-gray-700"><span className="font-semibold">{c.user?.username}</span> {c.text}</div>
          ))}
        </div>

        <form onSubmit={async e => { e.preventDefault(); if (!comment) return; try { await API.post(`/posts/${post._id}/comment`, { text: comment }); setComment(''); onRefresh && onRefresh() } catch (e) { console.error(e) } }} className="mt-4 flex gap-2">
          <input
            value={comment}
            onChange={e => setComment(e.target.value)}
            className="flex-1 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Add a comment..."
          />
          <button className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
            Comment
          </button>
        </form>
      </div>
    </div>
  )
}
